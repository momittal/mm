/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.Employee.Patient;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PDCReceptionistOrganization;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import Business.Organization.PatientOrganization;
import Business.PatientAttributes.VitalSigns;
import Business.Utils.Methods;
import Business.WorkQueue.RequestPatientAmbulance;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Business.WorkQueue.RequestPatientPDCReceptionist;
import Business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.awt.font.TextAttribute;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.swing.plaf.synth.ColorType;
import javax.swing.text.html.CSS;

/**
 *
 * @author Mohit
 */
public class PatientWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientOrganization patientOrganization;
    private UserAccount userAccount;
    private Patient patient;
    private Network network;
    private String lastRequestStatus;

    /**
     * Creates new form PersonWorkAreaJPanel
     */
    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patientOrganization = (PatientOrganization) organization;
        this.userAccount = account;
        this.network = network;
        patient = (Patient) userAccount.getEmployee();
        patientNameTxt.setText(patient.getName());
        if (patient.getPrimaryDoctor() != null) {
            primaryDoctorsNameTxtField.setText(patient.getPrimaryDoctor().getName());
        }
        populateWorkRequestTable();
        populateVitalSignsHistoryTable();
        isProfileComplete();
        isPatientVisitinDoctorOrER();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalSignHistoryJTable = new javax.swing.JTable();
        addVitalSignsBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        editPatientProfileBtn = new javax.swing.JButton();
        sensorToggleButton = new javax.swing.JToggleButton();
        callAmbulanceBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        primaryDoctorsNameTxtField = new javax.swing.JTextField();
        visitDoctorBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workRequestTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        vitalSignHistoryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "TimeStamp", "Heart Rate", "Blood Pressure", "Respiratory Rate", "ECG", "Status"
            }
        ));
        jScrollPane1.setViewportView(vitalSignHistoryJTable);

        addVitalSignsBtn.setText("Add Vital Signs");
        addVitalSignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalSignsBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Patient Work Area");

        patientNameTxt.setEditable(false);

        editPatientProfileBtn.setText("Edit Profile");
        editPatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPatientProfileBtnActionPerformed(evt);
            }
        });

        sensorToggleButton.setText("Switch ON Sensor");
        sensorToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorToggleButtonActionPerformed(evt);
            }
        });

        callAmbulanceBtn.setText("Call Ambulance");
        callAmbulanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callAmbulanceBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Primary Doctors Name");

        primaryDoctorsNameTxtField.setEditable(false);

        visitDoctorBtn.setText("Visit Doctor");
        visitDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitDoctorBtnActionPerformed(evt);
            }
        });

        workRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Request Receiver", "Request Status", "Sender"
            }
        ));
        jScrollPane3.setViewportView(workRequestTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(primaryDoctorsNameTxtField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126)
                .addComponent(editPatientProfileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(sensorToggleButton)
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(addVitalSignsBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(callAmbulanceBtn)
                            .addGap(137, 137, 137)
                            .addComponent(visitDoctorBtn)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(primaryDoctorsNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editPatientProfileBtn)
                            .addComponent(sensorToggleButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVitalSignsBtn)
                    .addComponent(callAmbulanceBtn)
                    .addComponent(visitDoctorBtn))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editPatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPatientProfileBtnActionPerformed
        // TODO add your handling code here:
        goToPatientProfileJPanel();
    }//GEN-LAST:event_editPatientProfileBtnActionPerformed

    private void sensorToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorToggleButtonActionPerformed
        // TODO add your handling code here:
        if (sensorToggleButton.isSelected()) {
            sensorToggleButton.setText("Switch OFF Sensor");
        } else {
            sensorToggleButton.setText("Switch ON Sensor");
        }

        ScheduledExecutorService scheduledExecutorService
                = Executors.newScheduledThreadPool(5);

        Runnable task = new Runnable() {
            @Override
            public void run() {
                if (sensorToggleButton.isSelected()) {
                    Methods.inputVitalSigns(patient);
                    populateVitalSignsHistoryTable();

                    //checkIfPatientNeedsAmbulanceOrPrimaryDoctor();
                } else {
                    scheduledExecutorService.shutdown();
                    sensorToggleButton.setText("Switch ON Sensor");
                }
            }
        };

        ScheduledFuture scheduledTask;
        scheduledTask = scheduledExecutorService.scheduleAtFixedRate(task, 1000, 4000, TimeUnit.MILLISECONDS);


    }//GEN-LAST:event_sensorToggleButtonActionPerformed

    private void callAmbulanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callAmbulanceBtnActionPerformed
        // TODO add your handling code here:
        callAmbulance();
    }//GEN-LAST:event_callAmbulanceBtnActionPerformed

    private void visitDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitDoctorBtnActionPerformed
        // TODO add your handling code here:
        //RequestPatientTO PDCReceptionist
        Enterprise inEnterprise = null;
        //Organization inOrgnization = null;
        Organization organization = null;
        UserAccount userAccount = patient.getPrimaryDoctor().getUserAccount();
        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    if (userAccount.equals(ua)) {
                        inEnterprise = ent;
                        //inOrgnization = org;
                    }
                    break;
                }
            }
        }

        for (Organization org : inEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof PDCReceptionistOrganization) {
                organization = (PDCReceptionistOrganization) org;
            }
        }

        RequestPatientPDCReceptionist request5 = new RequestPatientPDCReceptionist();
        request5.setSender(patient.getUserAccount());
        request5.setStatus("Patient is Visiting Doctor");
        request5.setMessage("Patient is Visitin Doctor");
        request5.setPatient(patient);

        if (organization != null) {
            organization.getWorkQueue().getWorkRequestList().add(request5);
            patient.getUserAccount().getWorkQueue().getWorkRequestList().add(request5);
        }
        JOptionPane.showMessageDialog(null, "Patient is Visiting Doctor");
        populateWorkRequestTable();
        isPatientVisitinDoctorOrER();
    }//GEN-LAST:event_visitDoctorBtnActionPerformed

    private void addVitalSignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalSignsBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PatientAddVitalSignsJPanel", new PatientAddVitalSignsJPanel(userProcessContainer, patientOrganization, this, patient));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_addVitalSignsBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalSignsBtn;
    private javax.swing.JButton callAmbulanceBtn;
    private javax.swing.JButton editPatientProfileBtn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField primaryDoctorsNameTxtField;
    private javax.swing.JToggleButton sensorToggleButton;
    private javax.swing.JButton visitDoctorBtn;
    private javax.swing.JTable vitalSignHistoryJTable;
    private javax.swing.JTable workRequestTable;
    // End of variables declaration//GEN-END:variables

    public void populateVitalSignsHistoryTable() {

        DefaultTableModel dtm = (DefaultTableModel) vitalSignHistoryJTable.getModel();
        dtm.setRowCount(0);
        String lastStatus = "";
        Object row[] = new Object[6];
        for (VitalSigns vitalSigns : patient.getVitalSignsHistory().getVitalSignsHistory()) {

            row[0] = vitalSigns;
            row[1] = vitalSigns.getHeartRate();
            row[2] = vitalSigns.getSystolicBloodPressure();
            row[3] = vitalSigns.getRespiratoryRate();
            row[4] = vitalSigns.getEcg();
            if (vitalSigns.isStatus()) {
                row[5] = "Normal";
            } else {
                row[5] = "AbNormal";
            }
            dtm.addRow(row);
            if (!vitalSigns.isStatus()) {
                //change color of the row to red

            }
        }
        lastStatus = String.valueOf(row[5]);
        //Methods.arrangeTableInDescending(vitalSignHistoryJTable, 0);
        checkIfPatientNeedsAmbulanceOrPrimaryDoctor();
    }

    private void callAmbulance() {
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PatientCallAmbulanceJPanel", new PatientCallAmbulanceJPanel(userProcessContainer, patient, network, userAccount, this));
        layout.next(userProcessContainer);
    }

    private void goToPatientProfileJPanel() {
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PatientProfile", new PatientProfile(userProcessContainer, patient, network, this));
        layout.next(userProcessContainer);
    }

    public void isProfileComplete() {
        if ((patient.getAge() == 0)
                || patient.getBloodGroup().equals("")
                || patient.getInsuranceInfo().equals("")
                || patient.getPrimaryDoctor() == null) {
            JOptionPane.showMessageDialog(null, "Please Complete Your Profile");
            sensorToggleButton.setEnabled(false);
            addVitalSignsBtn.setEnabled(false);
            callAmbulanceBtn.setEnabled(false);
            visitDoctorBtn.setEnabled(false);
        } else {
            sensorToggleButton.setEnabled(true);
            addVitalSignsBtn.setEnabled(true);
            callAmbulanceBtn.setEnabled(true);
            visitDoctorBtn.setEnabled(true);
        }
    }

    public void populateWorkRequestTable() {
        DefaultTableModel dtm = (DefaultTableModel) workRequestTable.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[4];
        for (WorkRequest request1 : userAccount.getWorkQueue().getWorkRequestList()) {
            row[0] = request1.getRequestDate().getTime();
            row[1] = request1.getReceiver();
            row[2] = request1.getStatus();
            row[3] = request1;
            dtm.addRow(row);
            lastRequestStatus = request1.getStatus();
        }

        if (workRequestTable.getColumnModel().getColumnCount() > 3) {
            workRequestTable.removeColumn(workRequestTable.getColumnModel().getColumn(3));
        }
    }

    private void checkIfPatientNeedsAmbulanceOrPrimaryDoctor() {
        int size = patient.getVitalSignsHistory().getVitalSignsHistory().size();
        boolean status1 = true, status2 = true, status3 = true;
        if (size >= 3) {
            status1 = patient.getVitalSignsHistory().getVitalSignsHistory().get(size - 1).isStatus();
            status2 = patient.getVitalSignsHistory().getVitalSignsHistory().get(size - 2).isStatus();
            status3 = patient.getVitalSignsHistory().getVitalSignsHistory().get(size - 3).isStatus();
            if (!status3 && !status2 && !status1) {
                JOptionPane.showMessageDialog(null, "You are having a heart attack. Call Ambulance!", "Call Ambulance", JOptionPane.WARNING_MESSAGE);
                //Disable all buttons and stop sensor
                editPatientProfileBtn.setEnabled(false);       
                    addVitalSignsBtn.setEnabled(false);
                visitDoctorBtn.setEnabled(false);
                sensorToggleButton.setSelected(false);
            }
//            if (!status3 && !status2 && status1) {
//                JOptionPane.showMessageDialog(null, "You are at a risk of heart attack. \n You should probably visit your doctor");
//            }
            
        }
    }

    public void isPatientVisitinDoctorOrER() {
        String lastRequestStatus = "";
        int size = patient.getUserAccount().getWorkQueue().getWorkRequestList().size();
        if (size > 0) {
            WorkRequest lastRequest = patient.getUserAccount().getWorkQueue().getWorkRequestList().get(size - 1);
            if (lastRequest instanceof RequestPatientPDCReceptionist) {
                lastRequestStatus = lastRequest.getStatus();
                if (!lastRequestStatus.equalsIgnoreCase("Visit Complete")) {
                    JOptionPane.showMessageDialog(null, "Patient is Visiting Doctor");
                    editPatientProfileBtn.setEnabled(false);
                    callAmbulanceBtn.setEnabled(false);
                    addVitalSignsBtn.setEnabled(false);
                    visitDoctorBtn.setEnabled(false);
                }
            } else if (lastRequest instanceof RequestPatientAmbulance) {
                lastRequestStatus = lastRequest.getStatus();
                if (!lastRequestStatus.equalsIgnoreCase("Patient is operated and released")) {
                    JOptionPane.showMessageDialog(null, "Patient is Visiting ER");
                    editPatientProfileBtn.setEnabled(false);
                    callAmbulanceBtn.setEnabled(false);
                    addVitalSignsBtn.setEnabled(false);
                    visitDoctorBtn.setEnabled(false);
                }
            }
        }

    }
}
