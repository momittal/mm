/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PDCPrimaryDoctorRole;

import Business.Employee.Patient;
import Business.Employee.PrimaryDoctor;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RequestPDCNursePDCPrimaryDoctor;
import Business.WorkQueue.RequestPatientPDCReceptionist;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mohit
 */
public class PDCPrimaryDoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private PrimaryDoctor primaryDoctor;

    /**
     * Creates new form PDCPrimaryDoctorWorkAreaJPanel
     */
    public PDCPrimaryDoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.primaryDoctor = (PrimaryDoctor) userAccount.getEmployee();
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        seeReportsBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("PDC Primary Doctor Work Area");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sender", "Patient", "Message", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        seeReportsBtn.setText("Live Reports");
        seeReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeReportsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seeReportsBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(83, 83, 83)
                                .addComponent(processJButton)))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton))
                .addGap(18, 18, 18)
                .addComponent(seeReportsBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request7 = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request7.getStatus().equalsIgnoreCase("Sent To Doctor")) {
            request7.setReceiver(userAccount);
            request7.setStatus("Patient is being attended by Doctor");
            WorkRequest lastRequest = null;
            for (WorkRequest request5 : request7.getPatient().getUserAccount().getWorkQueue().getWorkRequestList()) {
                if (request5 instanceof RequestPatientPDCReceptionist) {
                    lastRequest = request5;
                }
            }
            if (lastRequest != null) {
                lastRequest.setStatus("Patient is being attended by Doctor");
            }
            populateTable();
            JOptionPane.showMessageDialog(null, "patient Assigned To Doctor");
        } else if (request7.getStatus().equalsIgnoreCase("Visit Complete")) {
            JOptionPane.showMessageDialog(null, "Visit Already Completed, Unable To Process");
            return;
        } else {
            JOptionPane.showMessageDialog(null, "Unable To Process");
            return;
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        RequestPDCNursePDCPrimaryDoctor request7 = (RequestPDCNursePDCPrimaryDoctor) workRequestJTable.getValueAt(selectedRow, 0);
        if (request7.getStatus().equalsIgnoreCase("Patient is being attended by Doctor") || request7.getStatus().equalsIgnoreCase("Doctor is Monitoring Patient")) {
            request7.setStatus("Doctor is Monitoring Patient");
            WorkRequest lastRequest = null;
            for (WorkRequest request5 : request7.getPatient().getUserAccount().getWorkQueue().getWorkRequestList()) {
                if (request5 instanceof RequestPatientPDCReceptionist) {
                    lastRequest = request5;
                }
            }
            if (lastRequest != null) {
                lastRequest.setStatus("Doctor is Monitoring Patient");
            }
            PDCPrimaryDoctorProcessJPanel pdcPrimaryDoctorProcessJPanel = new PDCPrimaryDoctorProcessJPanel(userProcessContainer, request7, userAccount, this);
            userProcessContainer.add("pdcPrimaryDoctorProcessJPanel", pdcPrimaryDoctorProcessJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else if (request7.getStatus().equalsIgnoreCase("Sent To Doctor")) {
            JOptionPane.showMessageDialog(null, "Please Assign yourself to the Patient First");
            return;
        } else {
            JOptionPane.showMessageDialog(null, "Unable To Process");
            return;
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void seeReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeReportsBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PDCPrimaryDoctorReportsJPanel", new PDCPrimaryDoctorReportsJPanel(userProcessContainer, userAccount));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_seeReportsBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton seeReportsBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request7 : userAccount.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[5];
            row[0] = request7;

            row[1] = request7.getPatient();
            row[2] = request7.getMessage();
            row[3] = request7.getReceiver();
            row[4] = request7.getStatus();
            model.addRow(row);
        }
    }
}
