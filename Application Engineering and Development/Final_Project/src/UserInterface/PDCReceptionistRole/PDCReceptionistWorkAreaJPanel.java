/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PDCReceptionistRole;

import Business.Employee.Patient;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PDCNurseOrganization;
import Business.Organization.PDCReceptionistOrganization;
import UserInterface.PDCPrimaryDoctorRole.*;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RequestPDCReceptionistPDCNurse;
import Business.WorkQueue.RequestPatientPDCReceptionist;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mohit
 */
public class PDCReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private PDCReceptionistOrganization organization;
    private Enterprise enterprise;

    /**
     * Creates new form PDCPrimaryDoctorWorkAreaJPanel
     */
    public PDCReceptionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = (PDCReceptionistOrganization) organization;
        this.enterprise = enterprise;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("PDC Receptionist Work Area");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sender", "Message", "Patient", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(49, 49, 49)
                                .addComponent(processJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(62, 62, 62)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processJButton)
                    .addComponent(assignJButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request5 = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request5.getStatus().equalsIgnoreCase("Sent To Nurse")) {
            JOptionPane.showMessageDialog(null, "Patient Already Sent To Nurse");
            return;
        } else if(request5.getStatus().equalsIgnoreCase("Patient is visiting doctor")){
            request5.setReceiver(userAccount);
            request5.setStatus("Patient Reached PDC");
            populateTable();
            JOptionPane.showMessageDialog(null, "Receptionist is attending the patient");
        } else{
            JOptionPane.showMessageDialog(null, "Unable to assign");
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        RequestPatientPDCReceptionist request5 = (RequestPatientPDCReceptionist) workRequestJTable.getValueAt(selectedRow, 0);
        Patient patient = (Patient) request5.getPatient();
        if (request5.getStatus().equalsIgnoreCase("Patient Reached PDC")) {
            request5.setStatus("Sent To Nurse");
            populateTable();

            RequestPDCReceptionistPDCNurse request6 = new RequestPDCReceptionistPDCNurse();
            request6.setSender(userAccount);
            request6.setStatus("Sent To Nurse");
            request6.setMessage("Patient is Sent To Nurse");
            request6.setPatient(patient);

            PDCNurseOrganization nurseOrg = null;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof PDCNurseOrganization) {
                    nurseOrg = (PDCNurseOrganization) org;
                }
            }
            
            if (nurseOrg != null) {
                nurseOrg.getWorkQueue().getWorkRequestList().add(request6);
                userAccount.getWorkQueue().getWorkRequestList().add(request6);
                JOptionPane.showMessageDialog(null, "Patient is Sent to Nurse");
            }else{
                JOptionPane.showMessageDialog(null, "No Nurse Organization");
            }
            

        } else {
            JOptionPane.showMessageDialog(null, "Unable To Process");
        }

    }//GEN-LAST:event_processJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);
        Object[] row = new Object[5];

        for (WorkRequest request5 : organization.getWorkQueue().getWorkRequestList()) {
            row[0] = request5;
            row[1] = request5.getMessage();
            row[2] = request5.getPatient();
            row[3] = request5.getReceiver();
            row[4] = request5.getStatus();
            dtm.addRow(row);
        }
    }
}
