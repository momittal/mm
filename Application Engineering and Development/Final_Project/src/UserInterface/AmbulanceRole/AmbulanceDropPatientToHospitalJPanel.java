/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AmbulanceRole;

import Business.Employee.Employee;
import Business.Employee.Patient;
import Business.Enterprise.EmergencyRoomEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.PatientAttributes.ERVisit;
import Business.PatientAttributes.VitalSigns;
import Business.UserAccount.UserAccount;
import Business.Utils.Methods;
import static Business.Utils.Methods.randomNum;
import static Business.Utils.Methods.vitalSignsStatusChecker;
import Business.WorkQueue.RequestAmbulanceERCoordinator;
import Business.WorkQueue.RequestPatientAmbulance;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.sound.midi.Receiver;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Mohit
 */
public class AmbulanceDropPatientToHospitalJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Network network;
    private Employee ambulance;
    private Patient patient;
    private ERVisit erVisit;
    private Employee erCoordinator;
    private AmbulanceWorkAreaJPanel awajp;

    /**
     * Creates new form AmbulanceWorkAreaJPanel
     */
    public AmbulanceDropPatientToHospitalJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Network network, Patient patient, AmbulanceWorkAreaJPanel awajp) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = organization;
        this.network = network;
        this.ambulance = userAccount.getEmployee();
        ambulanceTxtField.setText(ambulance.getName());
        this.patient = patient;
        //getPatientInfo();
        patientNameTxtField.setText(patient.getName());
        erVisit = this.patient.getErVisitHistory().addERVisit();
        populateEmergencyRoomListTable();
        this.awajp = awajp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        patientNameTxtField = new javax.swing.JTextField();
        Ambulance = new javax.swing.JLabel();
        ambulanceTxtField = new javax.swing.JTextField();
        giveAspirinBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        emergencyRoomListTable = new javax.swing.JTable();
        dropPatientToHospitalBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        advancedTestResultCheckBox = new javax.swing.JCheckBox();
        performAdvancedTestsBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Patient");

        patientNameTxtField.setEditable(false);

        Ambulance.setText("Ambulance");

        ambulanceTxtField.setEditable(false);

        giveAspirinBtn.setText("Give Aspirin");
        giveAspirinBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giveAspirinBtnActionPerformed(evt);
            }
        });

        emergencyRoomListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emergency Room", "Time to Reach", "Waiting Time", "Total Time", "ER Coordinator"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(emergencyRoomListTable);

        dropPatientToHospitalBtn.setText("Drop Patient To Hospital");
        dropPatientToHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropPatientToHospitalBtnActionPerformed(evt);
            }
        });

        jLabel9.setText("Advanced Test Report Normal");

        jLabel2.setText("During The Ambulance Ride");

        advancedTestResultCheckBox.setEnabled(false);

        performAdvancedTestsBtn.setText("Perform Advanced Tests");
        performAdvancedTestsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performAdvancedTestsBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(giveAspirinBtn)
                        .addGap(99, 99, 99)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(performAdvancedTestsBtn))
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dropPatientToHospitalBtn))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(29, 29, 29)
                                    .addComponent(advancedTestResultCheckBox))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(Ambulance))
                                    .addGap(34, 34, 34)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ambulanceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(85, 85, 85))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ambulance)
                    .addComponent(ambulanceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(giveAspirinBtn)
                    .addComponent(performAdvancedTestsBtn))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                    .addComponent(advancedTestResultCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(dropPatientToHospitalBtn))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void giveAspirinBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giveAspirinBtnActionPerformed
        // TODO add your handling code here:
        erVisit.setAspirinTaken(true);
        JOptionPane.showMessageDialog(null, "Aspirin Given To Patient");
        giveAspirinBtn.setEnabled(false);
    }//GEN-LAST:event_giveAspirinBtnActionPerformed

    private void performAdvancedTestsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performAdvancedTestsBtnActionPerformed
        // TODO add your handling code here:
        erVisit.setAdvancedTestsPerformed(true);
        int x = randomNum(1, 100);
        if (x<=50){
            erVisit.setStatusNormalInAmbulance(true);
            advancedTestResultCheckBox.setSelected(true);
        }
        else{
            erVisit.setStatusNormalInAmbulance(false);
        }
        performAdvancedTestsBtn.setEnabled(false);
        
    }//GEN-LAST:event_performAdvancedTestsBtnActionPerformed

    private void dropPatientToHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropPatientToHospitalBtnActionPerformed
        // TODO add your handling code here:
        //take patient, ervisit to next panel
        //ervisit shoould contain the ambulance taking the patient and the hospital where patient is taken
        //Attributes in ERVisit.java for ambulance and hospital
        int selectedRow = emergencyRoomListTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }
        
        else {
            RequestAmbulanceERCoordinator request2 = new RequestAmbulanceERCoordinator();
            Employee erco = (Employee) emergencyRoomListTable.getModel().getValueAt(selectedRow,4);
            
            UserAccount erCoordinator = erco.getUserAccount();
            request2.setReceiver(erCoordinator);
            request2.setPatient(patient);
            request2.setStatus("Patient Dropped to Emergency Room");
            WorkRequest lastRequest = null;
            for (WorkRequest request: request2.getPatient().getUserAccount().getWorkQueue().getWorkRequestList()){
                if (request instanceof RequestPatientAmbulance){
                    lastRequest = request;
                    
                }
            }
            if(lastRequest!= null){
                lastRequest.setStatus("Patient Dropped to Emergency Room");
            }
            request2.setMessage("Patient Dropped to Emergency Room");
            request2.setSender(ambulance.getUserAccount());
            
            
            if (organization != null) {
                ambulance.getUserAccount().getWorkQueue().getWorkRequestList().add(request2);
                erCoordinator.getWorkQueue().getWorkRequestList().add(request2);
            }
        }
        JOptionPane.showMessageDialog(null, "Patient Dropped To Emergency Room");
        
    }//GEN-LAST:event_dropPatientToHospitalBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        awajp.populateRequestTable();
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ambulance;
    private javax.swing.JCheckBox advancedTestResultCheckBox;
    private javax.swing.JTextField ambulanceTxtField;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton dropPatientToHospitalBtn;
    private javax.swing.JTable emergencyRoomListTable;
    private javax.swing.JButton giveAspirinBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patientNameTxtField;
    private javax.swing.JButton performAdvancedTestsBtn;
    // End of variables declaration//GEN-END:variables

    private void getPatientInfo() {
        patient = null;
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if (request.getStatus().equalsIgnoreCase("Ambulance Called by Patient")) {
                patient = (Patient) request.getSender().getEmployee();
            }
        }
        if (patient != null) {
            patientNameTxtField.setText(patient.getName());
        } else {
            JOptionPane.showMessageDialog(null, "No Patient to Pickup");
        }
    }

 /*   public void inputVitalSigns() {

        int respRate = 0, heartRate = 0, bloodPressure = 0, weightInKg = 0, ecg = 0;
        respRate = randomNum(20, 30);
        heartRate = randomNum(55, 90);
        bloodPressure = randomNum(50, 100);
        weightInKg = randomNum(65, 80);
        ecg = randomNum(40, 60);

        VitalSigns vitalSigns = patient.getVitalSignsHistory().addVitalSigns();
        vitalSigns.setRespiratoryRate(respRate);
        vitalSigns.setHeartRate(heartRate);
        vitalSigns.setSystolicBloodPressure(bloodPressure);
        vitalSigns.setWeightInKg(weightInKg);
        vitalSigns.setEcg(ecg);
        vitalSigns.setTimeStamp(new Date());
        vitalSigns.setStatus(vitalSignsStatusChecker(ecg));

    } */

    private void populateEmergencyRoomListTable() {
        
        DefaultTableModel dtm = (DefaultTableModel) emergencyRoomListTable.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[5];
        for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()){
            if (enterprise instanceof EmergencyRoomEnterprise){
               row[0] = enterprise; 
               int timeToReach = randomNum(4, 14);
               int waitingTime = randomNum(0, 4);
               row[1] = timeToReach;
               row[2] = waitingTime;
               row[3] = timeToReach+waitingTime;
               for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                   if (organization.getName().equalsIgnoreCase("ER Coordinator Organization")){
                       erCoordinator = organization.getEmployeeDirectory().getEmployeeList().get(0);
                   }
               }
               row[4] = erCoordinator;
               dtm.addRow(row);
            }
                        
        }Methods.arrangeTableInAscending(emergencyRoomListTable,3);
        emergencyRoomListTable.setRowSelectionInterval(0, 0);
    }

//    private void arrangeTableInAscending() {
//        TableRowSorter<TableModel> sorter = new TableRowSorter<>(emergencyRoomListTable.getModel());
//        emergencyRoomListTable.setRowSorter(sorter);
//        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
//
//        int columnIndexToSort = 3;
//        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
//
//        sorter.setSortKeys(sortKeys);
//        sorter.sort();
//        
//    }

}
