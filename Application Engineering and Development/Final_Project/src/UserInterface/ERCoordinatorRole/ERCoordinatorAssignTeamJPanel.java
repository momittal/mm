/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ERCoordinatorRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.ERGeneralDoctorTeamOrganization;
import Business.Organization.ERSpecialistDoctorTeamOrganization;
import Business.Organization.Organization;
import Business.PatientAttributes.ERVisit;
import Business.UserAccount.UserAccount;
import static Business.Utils.Methods.getLastERVisit;
import Business.WorkQueue.RequestERCoordinatorERSpecialist;
import Business.WorkQueue.RequestPatientAmbulance;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mohit
 */
public class ERCoordinatorAssignTeamJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private WorkRequest request2;
    private ERCoordinatorWorkAreaJPanel ercwajp;
    private ERVisit erVisit;

    /**
     * Creates new form ERCoordinatorAssignTeamJPanel
     */
    public ERCoordinatorAssignTeamJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, WorkRequest request, ERCoordinatorWorkAreaJPanel ercwajp) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.request2 = request;
        this.ercwajp = ercwajp;
        this.erVisit = getLastERVisit(request);
        populateDoctorTeamTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorTeamTable = new javax.swing.JTable();
        assignDoctorTeam = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        doctorTeamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Team Name", "Team Type", "Status (Available/NA)"
            }
        ));
        jScrollPane2.setViewportView(doctorTeamTable);

        assignDoctorTeam.setText("Assign Dcotor Team");
        assignDoctorTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignDoctorTeamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(116, 116, 116)
                        .addComponent(assignDoctorTeam))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignDoctorTeam)
                    .addComponent(backBtn))
                .addGap(417, 417, 417))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        ercwajp.populateIncomingPatientListTable();
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void assignDoctorTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignDoctorTeamActionPerformed
        // TODO add your handling code here:
        int selectedRow = doctorTeamTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        } else {
            Employee erSpecialistTeam = (Employee) doctorTeamTable.getValueAt(selectedRow, 0) ;
            RequestERCoordinatorERSpecialist request3 = new RequestERCoordinatorERSpecialist();
            request3.setReceiver(erSpecialistTeam.getUserAccount());
            request3.setPatient(request2.getPatient());
            request3.setStatus("Specialist Team Assigned by ER Coordinator");
            WorkRequest lastRequest = null;
            for (WorkRequest request : request3.getPatient().getUserAccount().getWorkQueue().getWorkRequestList()) {
                    if (request instanceof RequestPatientAmbulance) {
                        lastRequest = request;
                    }
                }
            if(lastRequest!= null){
                lastRequest.setStatus("Specialist Team Assigned by ER Coordinator");
                request2.setStatus("Specialist Team Assigned by ER Coordinator");
            }
            request3.setMessage("Call Ambulance");
            
            request3.setSender(userAccount);
            erSpecialistTeam.getUserAccount().getWorkQueue().getWorkRequestList().add(request3);
            userAccount.getWorkQueue().getWorkRequestList().add(request3);
        }
        
        JOptionPane.showMessageDialog(null, "Doctor Team Assigned");
    }//GEN-LAST:event_assignDoctorTeamActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignDoctorTeam;
    private javax.swing.JButton backBtn;
    private javax.swing.JTable doctorTeamTable;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void populateDoctorTeamTable() {
        DefaultTableModel dtm = (DefaultTableModel) doctorTeamTable.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[3];
        if (erVisit.isStatusNormalInAmbulance()) {
            //code to populate general doctor team
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof ERGeneralDoctorTeamOrganization) {
                    for (Employee employee : org.getEmployeeDirectory().getEmployeeList()) {
                        row[0] = employee;
                        row[1] = Organization.Type.ERGeneralDoctorTeam.getValue();
                        row[2] = "Available";
                        dtm.addRow(row);
                    }
                }
            }
        } else {
            //code to populate specialist doctor team;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof ERSpecialistDoctorTeamOrganization) {
                    for (Employee employee : org.getEmployeeDirectory().getEmployeeList()) {
                        row[0] = employee;
                        row[1] = Organization.Type.ERSpecialistDoctorTeam.getValue();
                        row[2] = "Available";
                        dtm.addRow(row);
                    }
                }
            }
        }
    }


}
